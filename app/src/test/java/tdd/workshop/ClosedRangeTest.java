/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tdd.workshop;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

@DisplayName("閉区間オブジェクト ClosedRange のテスト")
class ClosedRangeTest {
  // @Test void alwaysFail() {
  //   fail("これは必ず失敗します");
  // }

  @Nested
  class 閉区間オブジェクトClosedRangeは下端点と上端点を持つ {
    @ParameterizedTest(name = "閉区間オブジェクトは下端点{0}を持つ")
    @CsvSource({
      "2, 9, 2", "3, 7, 3",
    })
    void head(int head, int tail, int expected) {
      assertEquals(expected, new ClosedRange(head, tail).head);
    }

    @ParameterizedTest(name = "閉区間オブジェクトは上端点{1}を持つ")
    @CsvSource({
      "2, 9, 9", "3, 7, 7",
    })
    void tail(int head, int tail, int expected) {
      assertEquals(tail, new ClosedRange(head, tail).tail);
    }
  }

  @Nested
  class 下端点が上端点より大きい閉区間オブジェクトは作成できない {
    @ParameterizedTest(name = "下端点{0}が上端点{1}より大きい場合はHeadBiggerThanTailExceptionを返す")
    @CsvSource({
      "9, 2", "7, 3",
    })
    void raiseHeadBiggerThanTailException(int bighead, int tail) {
      // 引数にはラムダ式
      assertThrows(HeadBiggerThanTailException.class, () -> new ClosedRange(bighead, tail));
    }
  }

  @Nested
  class toStringメソッドは閉区間オブジェクトの文字列表現を返す {
    @ParameterizedTest(name = "文字列表現[{0},{1}]を返す")
    @CsvSource({
      "2, 9, '[2,9]'",
      "3, 7, '[3,7]'",
      "4, 4, '[4,4]'",
    })
    void toString(int head, int tail, String expected) {
      assertEquals(expected, new ClosedRange(head, tail).toString());
    }
  }

  @Nested
  class ContainsIntegerメソッドは引数に与えられた整数を閉区間に含むかbooleanで返す {
    @ParameterizedTest(name = "下端点{0}上端点{1}およびその内側の整数ならTrueを返す")
    @CsvSource({
      "2, 9, 3, True",
      "2, 9, 8, True",
      "2, 9, 2, True",
      "2, 9, 9, True",
      "2, 9, 1, False",
      "2, 9, 10, False",
    })
    void containsInteger(int head, int tail, int argument, boolean expected) {
      assertEquals(new ClosedRange(head, tail).containsInteger(argument), expected);
    }
  }

  @Nested
  class equalsメソッドは引数に与えられた閉区間オブジェクトが等価かbooleanで返す {
    @ParameterizedTest(name = "閉区間オブジェクト{0}{1}と{2}{3}が等価ならTrueを返す")
    @CsvSource({
      "2, 9, 2, 9, True",
      "2, 9, 3, 8, False",
    })
    void equals(int head, int tail, int head2, int tail2, boolean expected) {
      assertEquals(new ClosedRange(head, tail).equals(new ClosedRange(head2, tail2)), expected);
    }
  }

  @Nested
  class ContainsClosedRangeメソッドは引数に与えられた閉区間オブジェクトが部分集合かbooleanを返す {
    @ParameterizedTest(name = "閉区間オブジェクト{2}{3}が{1}{2}の部分集合ならTrueを返す")
    @CsvSource({
      "2, 9, 3, 8, True",
      "2, 9, 2, 2, True",
      "2, 9, 9, 9, True",
      "2, 9, 2, 9, True",
      "2, 9, 1, 10, False",
    })
    void containsClosedRange(int head, int tail, int head2, int tail2, boolean expected) {
      assertEquals(
          new ClosedRange(head, tail).containsClosedRange(new ClosedRange(head2, tail2)), expected);
    }
  }
}
